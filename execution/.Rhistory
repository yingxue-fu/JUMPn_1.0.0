shiny::runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
version
install.packages('yaml')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
lib(singular)
xcode-select --install
update.packages('ggplot2')
update.packages()
R.home()
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('colorspace')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
shiny::runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('ggplot2')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('glue')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
shiny::runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('backports')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('xml2')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
shiny::runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('stringi')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('datatable')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('datatable')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
install.packages('data.table')
runApp('Desktop/My_Projects/JUMPn_Project/JUMPn_Shiny/execution')
shiny::runApp()
install.packages('farver')
runApp()
install.packages('checkmate')
runApp()
shiny::runApp()
install.packages('fastcluster')
runApp()
install.packages('matrixStats')
runApp()
install.packages('base64enc')
runApp()
install.packages('jpeg')
runApp()
install.packages('digest')
install.packages('digest')
install.packages('tidyverse')
shiny::runApp('~/Desktop/JUMPn_Shiny/execution')
runApp('~/Desktop/JUMPn_Shiny/execution')
runApp('~/Desktop/JUMPn_Shiny/execution')
shiny::runApp('~/Desktop/JUMPn_Shiny/execution')
sessionInfo()
.libPaths()
library(shiny)
pkgs <- c('shiny','ggplot2','DT','tidyverse',                    ######
'plyr','readr','writexl','readxl',                     ######
'rvest','httr','igraph','visNetwork',                  ######
'stringr','magick','shinyjs','pdftools',               ######
'shinyBS','shinydashboard','shiny')                    ######
install.packages(pkgs, repos="http://cran.us.r-project.org")
shiny::runApp('~/Desktop/JUMPn_Shiny/execution')
runApp('~/Desktop/JUMPn_Shiny/execution')
runApp('~/Desktop/JUMPn_Shiny/execution')
runApp('~/Desktop/JUMPn_Shiny/execution')
library(openxlsx)  #### For Writing & Reading Excel Files             ###
library(igraph)    #### For Constructing and Analyzing Network Objects###
library(EnvStats)
constructing_network <- function(network_object){               ##
edges <- network_object[,1:2]                                 ##
edge_graph <- graph_from_edgelist(as.matrix(edges), dir=T)    ##
return (edge_graph)                                           ##
}                                                               ##
##################################################################
##################################################################
###############################################################################################
#### This function parses the source data for target GSEs, Drivers, and their DE Genes ########
###############################################################################################
parsing_source_data <- function(source_document,source_file){                            ######
source_data <- unique(unlist(read.xlsx(source_file)))
source_document <- read.xlsx(source_document)
source_description_str_vector <- strsplit(source_document[,1], ' ')                    ######
new_GSEs <- c()                                                                        ######
drivers <- c()                                                                         ######
for (list in 1:length(source_description_str_vector)){                                 #######################################
new_GSEs <- c(new_GSEs,source_description_str_vector[[list]][substr(source_description_str_vector[[list]][],1,3)=='GSE']) ##
drivers <- c(drivers, source_description_str_vector[[list]][1])                      #######################################
}                                                                                      ######
drivers <- toupper(drivers)
source_document[,1] <- as.vector(new_GSEs)                                             ######
source_document[,2] <- as.vector(drivers)                                              ######
necessary_data <- source_document[is.element(source_document[,1],source_data)==TRUE,]  ###############
unique_drivers <- as.vector(unique(necessary_data[,2][is.element(necessary_data[,2],node_vector)])) ##
driver_with_de_genes <- list()                                                         ###############
for (driver in 1:length(unique_drivers)){                                              #############################################################
driver_with_de_genes[[driver]] <- na.omit(as.vector(unlist(necessary_data[necessary_data[,2]==unique_drivers[driver],3:ncol(necessary_data)]))) ##
}                                                                                      #############################################################
driver_with_de_genes <- lapply(driver_with_de_genes, `length<-`, max(lengths(driver_with_de_genes))) ##
driver_with_de_genes_df <- as.data.frame(driver_with_de_genes)                         ################
colnames(driver_with_de_genes_df) <- unique_drivers                                    ######
return (driver_with_de_genes_df)                                                       ######
}                                                                                        ######
###############################################################################################
###############################################################################################
###########################################################################################
##### This function computes the mean SPD for the driver from each of its DE genes ########
###########################################################################################
computing_driver_spd_from_DE <- function(driver_DE_df){                               #####
mean_spd_vector <- c()                                                              #####
driver_vector <- colnames(driver_DE_df)                                             #####
for (col in 1:ncol(driver_DE_df)){                                                  #####
regulated_list <- na.omit(unique(as.vector(unlist(compressed_gene_df[,col]))))    #############################################################
mean_spd_vector <- c(mean_spd_vector,mean(distance_output[driver_vector[col],regulated_list[is.element(regulated_list,node_vector)==TRUE]])) ##
}                                                                                   #############################################################
return(mean_spd_vector)                                                             #####
}                                                                                     #####
###########################################################################################
###########################################################################################
################################################################################################################
#### For n permutations, x genes are randomly selected from the master network, computing the average spd ######
#### for each driver. After, for each driver, a distribution is constructed including z-score and p-value ######
################################################################################################################
same_sample <- function(permutations, sample_size, driver_vector, spd_list){                              ######
driver_spd_df <- data.frame(driver_vector)                                                              ######
for (n in 1:permutations){                                                                              ######
spd_vector <- c()                                                                                     ######
random_genes <- sample(node_vector,sample_size)                                                       ######
spd_shit <- as.data.frame(distance_output[random_genes,driver_vector])                                ######
means <- as.vector(unlist(colMeans(spd_shit, na.rm=TRUE)))                                            ######
driver_spd_df <- cbind(driver_spd_df, means)                                                          ######
}                                                                                                       ######
driver_spd_df <- driver_spd_df[,-c(1)]                                                                  ################################################################################################################################################################
driver_info <- list(spd_list, apply(driver_spd_df,1,mean),apply(driver_spd_df,1,sd),(spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd),pnorm(-abs((spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd))),apply(driver_spd_df,1,skewness)) ####
yield_df <- as.data.frame(do.call(cbind,driver_info))                                                   ################################################################################################################################################################
rownames(yield_df) <- driver_vector                                                                     ###########################
colnames(yield_df) <- c('Driver SPD','Average SPD','Standard Deviation','Z-Score','P-Value of Driver SPD','Distribution Skew') ####
print(yield_df)                                                                                         ###########################
write.xlsx(yield_df, 'Driver_SignificanceE.xlsx',row.names=TRUE, col.names=TRUE)                        ######
return (driver_spd_df)                                                                                  ######
}                                                                                                         ######
################################################################################################################
###########################
network_object <- read.table('Desktop/hpc_files/tf_net.txt',header = TRUE)          ######
the_graph <- constructing_network(network_object)                                   ######
edge_connectivity(the_graph,source=network_object[,1],target=network_object[,2])    ######
distance_output <- distances(the_graph)                                             ######
print(max(distance_output))                                                         ######
node_vector <- unique(as.vector(unlist(network_object[,1:2])))                      ######
compressed_gene_df <- parsing_source_data('Desktop/TF_Perturbations_Followed_by_Expression.xlsx','Desktop/TF_Perturbations_GSEs.xlsx')                ##########
this_driver_vector <- colnames(compressed_gene_df)                                  ######
spd_compare_vector <- computing_driver_spd_from_DE(compressed_gene_df)              ######
for_dist <- same_sample(5000,500,this_driver_vector,spd_compare_vector)            ######
network_object <- read.table('Desktop/My_Projects/AD_Driver_Project/hpc_files/tf_net.txt',header = TRUE)          ######
the_graph <- constructing_network(network_object)                                   ######
edge_connectivity(the_graph,source=network_object[,1],target=network_object[,2])    ######
distance_output <- distances(the_graph)                                             ######
print(max(distance_output))                                                         ######
node_vector <- unique(as.vector(unlist(network_object[,1:2])))                      ######
compressed_gene_df <- parsing_source_data('Desktop/My_Projects/AD_Driver_Project/Driver_Data/TF_Perturbations_Followed_by_Expression.xlsx','Desktop/My_Projects/AD_Driver_Project/Driver_Data/TF_Perturbations_GSEs.xlsx')                ##########
this_driver_vector <- colnames(compressed_gene_df)                                  ######
spd_compare_vector <- computing_driver_spd_from_DE(compressed_gene_df)              ######
for_dist <- same_sample(5000,500,this_driver_vector,spd_compare_vector)
network_object <- read.table('Desktop/My_Projects/AD_Driver_Project/hpc_files/tf_net.txt',header = TRUE)          ######
library(openxlsx)  #### For Writing & Reading Excel Files             ###
library(igraph)    #### For Constructing and Analyzing Network Objects###
library(EnvStats)  #### For Computationally Burdensome Statisics      ###
#########################################################################
#########################################################################
##################################################################
############ This Function Creates the Master Network ############
##################################################################
constructing_network <- function(network_object){               ##
edges <- network_object[,1:2]                                 ##
edge_graph <- graph_from_edgelist(as.matrix(edges), dir=T)    ##
return (edge_graph)                                           ##
}                                                               ##
##################################################################
##################################################################
###############################################################################################
#### This function parses the source data for target GSEs, Drivers, and their DE Genes ########
###############################################################################################
parsing_source_data <- function(source_document,source_file){                            ######
source_data <- unique(unlist(read.xlsx(source_file)))
source_document <- read.xlsx(source_document)
source_description_str_vector <- strsplit(source_document[,1], ' ')                    ######
new_GSEs <- c()                                                                        ######
drivers <- c()                                                                         ######
for (list in 1:length(source_description_str_vector)){                                 #######################################
new_GSEs <- c(new_GSEs,source_description_str_vector[[list]][substr(source_description_str_vector[[list]][],1,3)=='GSE']) ##
drivers <- c(drivers, source_description_str_vector[[list]][1])                      #######################################
}                                                                                      ######
drivers <- toupper(drivers)
source_document[,1] <- as.vector(new_GSEs)                                             ######
source_document[,2] <- as.vector(drivers)                                              ######
necessary_data <- source_document[is.element(source_document[,1],source_data)==TRUE,]  ###############
unique_drivers <- as.vector(unique(necessary_data[,2][is.element(necessary_data[,2],node_vector)])) ##
driver_with_de_genes <- list()                                                         ###############
for (driver in 1:length(unique_drivers)){                                              #############################################################
driver_with_de_genes[[driver]] <- na.omit(as.vector(unlist(necessary_data[necessary_data[,2]==unique_drivers[driver],3:ncol(necessary_data)]))) ##
}                                                                                      #############################################################
driver_with_de_genes <- lapply(driver_with_de_genes, `length<-`, max(lengths(driver_with_de_genes))) ##
driver_with_de_genes_df <- as.data.frame(driver_with_de_genes)                         ################
colnames(driver_with_de_genes_df) <- unique_drivers                                    ######
return (driver_with_de_genes_df)                                                       ######
}                                                                                        ######
###############################################################################################
###############################################################################################
###########################################################################################
##### This function computes the mean SPD for the driver from each of its DE genes ########
###########################################################################################
computing_driver_spd_from_DE <- function(driver_DE_df){                               #####
mean_spd_vector <- c()                                                              #####
driver_vector <- colnames(driver_DE_df)                                             #####
for (col in 1:ncol(driver_DE_df)){                                                  #####
regulated_list <- na.omit(unique(as.vector(unlist(compressed_gene_df[,col]))))    #############################################################
mean_spd_vector <- c(mean_spd_vector,mean(distance_output[driver_vector[col],regulated_list[is.element(regulated_list,node_vector)==TRUE]])) ##
}                                                                                   #############################################################
return(mean_spd_vector)                                                             #####
}                                                                                     #####
###########################################################################################
###########################################################################################
################################################################################################################
#### For n permutations, x genes are randomly selected from the master network, computing the average spd ######
#### for each driver. After, for each driver, a distribution is constructed including z-score and p-value ######
################################################################################################################
same_sample <- function(permutations, sample_size, driver_vector, spd_list){                              ######
driver_spd_df <- data.frame(driver_vector)                                                              ######
for (n in 1:permutations){                                                                              ######
spd_vector <- c()                                                                                     ######
random_genes <- sample(node_vector,sample_size)                                                       ######
spd_shit <- as.data.frame(distance_output[random_genes,driver_vector])                                ######
means <- as.vector(unlist(colMeans(spd_shit, na.rm=TRUE)))                                            ######
driver_spd_df <- cbind(driver_spd_df, means)                                                          ######
}                                                                                                       ######
driver_spd_df <- driver_spd_df[,-c(1)]                                                                  ################################################################################################################################################################
driver_info <- list(spd_list, apply(driver_spd_df,1,mean),apply(driver_spd_df,1,sd),(spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd),pnorm(-abs((spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd))),apply(driver_spd_df,1,skewness)) ####
yield_df <- as.data.frame(do.call(cbind,driver_info))                                                   ################################################################################################################################################################
rownames(yield_df) <- driver_vector                                                                     ###########################
colnames(yield_df) <- c('Driver SPD','Average SPD','Standard Deviation','Z-Score','P-Value of Driver SPD','Distribution Skew') ####
print(yield_df)                                                                                         ###########################
write.xlsx(yield_df, 'Driver_SignificanceE.xlsx',row.names=TRUE, col.names=TRUE)                        ######
return (driver_spd_df)                                                                                  ######
}
network_object <- read.table('Desktop/My_Projects/AD_Driver_Project/hpc_files/tf_net.txt',header = TRUE)          ######
getwd()
setwd('/Users/dvanderw')
getwd()
network_object <- read.table('Desktop/My_Projects/AD_Driver_Project/hpc_files/tf_net.txt',header = TRUE)          ######
the_graph <- constructing_network(network_object)                                   ######
edge_connectivity(the_graph,source=network_object[,1],target=network_object[,2])    ######
distance_output <- distances(the_graph)                                             ######
print(max(distance_output))                                                         ######
node_vector <- unique(as.vector(unlist(network_object[,1:2])))                      ######
compressed_gene_df <- parsing_source_data('Desktop/My_Projects/AD_Driver_Project/Driver_Data/TF_Perturbations_Followed_by_Expression.xlsx','Desktop/My_Projects/AD_Driver_Project/Driver_Data/TF_Perturbations_GSEs.xlsx')                ##########
this_driver_vector <- colnames(compressed_gene_df)                                  ######
spd_compare_vector <- computing_driver_spd_from_DE(compressed_gene_df)              ######
for_dist <- same_sample(5000,500,this_driver_vector,spd_compare_vector)
same_sample <- function(permutations, sample_size, driver_vector, spd_list){                              ######
driver_spd_df <- data.frame(driver_vector)                                                              ######
for (n in 1:permutations){                                                                              ######
spd_vector <- c()                                                                                     ######
random_genes <- sample(node_vector,sample_size)                                                       ######
spd_shit <- as.data.frame(distance_output[random_genes,driver_vector])                                ######
means <- as.vector(unlist(colMeans(spd_shit, na.rm=TRUE)))                                            ######
driver_spd_df <- cbind(driver_spd_df, means)                                                          ######
}                                                                                                       ######
driver_spd_df <- driver_spd_df[,-c(1)]                                                                  ################################################################################################################################################################
print(driver_spd_df)
driver_info <- list(spd_list, apply(driver_spd_df,1,mean),apply(driver_spd_df,1,sd),(spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd),pnorm(-abs((spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd))),apply(driver_spd_df,1,skewness)) ####
yield_df <- as.data.frame(do.call(cbind,driver_info))                                                   ################################################################################################################################################################
rownames(yield_df) <- driver_vector                                                                     ###########################
colnames(yield_df) <- c('Driver SPD','Average SPD','Standard Deviation','Z-Score','P-Value of Driver SPD','Distribution Skew') ####
print(yield_df)                                                                                         ###########################
write.xlsx(yield_df, 'Driver_SignificanceE.xlsx',row.names=TRUE, col.names=TRUE)                        ######
return (driver_spd_df)                                                                                  ######
}                                                                                                         ######
###############
for_dist <- same_sample(5000,500,this_driver_vector,spd_compare_vector)            ######
same_sample <- function(permutations, sample_size, driver_vector, spd_list){                              ######
driver_spd_df <- data.frame(driver_vector)                                                              ######
for (n in 1:permutations){                                                                              ######
spd_vector <- c()                                                                                     ######
random_genes <- sample(node_vector,sample_size)                                                       ######
spd_shit <- as.data.frame(distance_output[random_genes,driver_vector])                                ######
means <- as.vector(unlist(colMeans(spd_shit, na.rm=TRUE)))                                            ######
driver_spd_df <- cbind(driver_spd_df, means)                                                          ######
}                                                                                                       ######
driver_spd_df <- driver_spd_df[,-c(1)]                                                                  ################################################################################################################################################################
write.xlsx(driver_spd_df, 'tf_spd_df.xlsx')
driver_info <- list(spd_list, apply(driver_spd_df,1,mean),apply(driver_spd_df,1,sd),(spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd),pnorm(-abs((spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd))),apply(driver_spd_df,1,skewness)) ####
yield_df <- as.data.frame(do.call(cbind,driver_info))                                                   ################################################################################################################################################################
rownames(yield_df) <- driver_vector                                                                     ###########################
colnames(yield_df) <- c('Driver SPD','Average SPD','Standard Deviation','Z-Score','P-Value of Driver SPD','Distribution Skew') ####
print(yield_df)                                                                                         ###########################
write.xlsx(yield_df, 'Driver_SignificanceE.xlsx',row.names=TRUE, col.names=TRUE)                        ######
return (driver_spd_df)                                                                                  ######
}
for_dist <- same_sample(5000,500,this_driver_vector,spd_compare_vector)            ######
network_object <- read.table('Desktop/My_Projects/AD_Driver_Project/hpc_files/sig_net.txt',header = TRUE)         ######
the_graph <- constructing_network(network_object)                                   ######
print(components(the_graph)$membership)                                             ######
edge_connectivity(the_graph,source=network_object[,1],target=network_object[,2])    ######
distance_output <- distances(the_graph)                                             ######
print(max(distance_output))
node_vector <- unique(as.vector(unlist(network_object[,1:2])))                      ######
compressed_gene_df <- parsing_source_data('Desktop/My_Projects/AD_Driver_Project/Driver_Data/Combined_SigGSE.xlsx','Desktop/My_Projects/AD_Driver_Project/Driver_Data/Test_Sig_GSE.xlsx')               ##########
this_driver_vector <- colnames(compressed_gene_df)                                  ######
spd_compare_vector <- computing_driver_spd_from_DE(compressed_gene_df)              ######
print(spd_compare_vector)
for_dist <- same_sample(5000,1000,this_driver_vector,spd_compare_vector)
same_sample <- function(permutations, sample_size, driver_vector, spd_list){                              ######
driver_spd_df <- data.frame(driver_vector)                                                              ######
for (n in 1:permutations){                                                                              ######
spd_vector <- c()                                                                                     ######
random_genes <- sample(node_vector,sample_size)                                                       ######
spd_shit <- as.data.frame(distance_output[random_genes,driver_vector])                                ######
means <- as.vector(unlist(colMeans(spd_shit, na.rm=TRUE)))                                            ######
driver_spd_df <- cbind(driver_spd_df, means)                                                          ######
}                                                                                                       ######
driver_spd_df <- driver_spd_df[,-c(1)]                                                                  ################################################################################################################################################################
write.xlsx(driver_spd_df, 'sig_spd_df.xlsx')
driver_info <- list(spd_list, apply(driver_spd_df,1,mean),apply(driver_spd_df,1,sd),(spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd),pnorm(-abs((spd_list-apply(driver_spd_df,1,mean))/apply(driver_spd_df,1,sd))),apply(driver_spd_df,1,skewness)) ####
yield_df <- as.data.frame(do.call(cbind,driver_info))                                                   ################################################################################################################################################################
rownames(yield_df) <- driver_vector                                                                     ###########################
colnames(yield_df) <- c('Driver SPD','Average SPD','Standard Deviation','Z-Score','P-Value of Driver SPD','Distribution Skew') ####
print(yield_df)                                                                                         ###########################
write.xlsx(yield_df, 'Driver_SignificanceE.xlsx',row.names=TRUE, col.names=TRUE)                        ######
return (driver_spd_df)                                                                                  ######
}
for_dist <- same_sample(5000,1000,this_driver_vector,spd_compare_vector)            ######
install.packages('openssl')
install.packages('BiocGenerics')
options(repos = BiocManager::repositories())
renv::install("BiocGenerics")
install.packages('magick')
install.packages('shiny','ggplot2','DT','tools','tidyverse','magick','plyr','readr','writexl','readxl','msigdbr','rvest','httr','igraph','visNetwork','org.Hs.eg.db','ReactomePA','AnnotationDbi','stringr','annotate','shinyjs','pdftools','shinyBS','shinydashboard','WGCNA', dependencies = TRUE)
my_pack <- c('shiny','ggplot2','DT','tools','tidyverse','magick','plyr','readr','writexl','readxl','msigdbr','rvest','httr','igraph','visNetwork','org.Hs.eg.db','ReactomePA','AnnotationDbi','stringr','annotate','shinyjs','pdftools','shinyBS','shinydashboard','WGCNA')
install.packages(my_pack,dependencies = TRUEE)
nstall.packages(my_pack,dependencies = TRUE)
install.packages(my_pack,dependencies = TRUE)
my_pack <- c('shiny','ggplot2','DT','tools','tidyverse','magick','plyr','readr','writexl','readxl','msigdbr','rvest','httr','igraph','visNetwork','org.Hs.eg.db','ReactomePA','AnnotationDbi','stringr','annotate','shinyjs','pdftools','shinyBS','shinydashboard','WGCNA')
install.packages(my_pack,dependencies = TRUE)
install.packages(my_pack, dependencies = TRUE)
getOption('repos')
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
library(BiocManager)
options(repos = BiocManager::repositories())
getOption('repos')
install.packages(my_pack, dependencies = TRUE)
install.packages(my_pack, dependencies = TRUE)
install.packages('Rccp')
install.packages('Rcpp')
.libPaths()
.libPaths("/Users/dvanderw/Library/R/4.0/library")
.libPaths()
assign(".lib.loc", '/Users/dvanderw/Library/R/4.0/library',envir = environment(.libPaths))
.libPaths()
mypacks <- c('shiny','ggplot2','DT','tools','tidyverse','plyr','readr','writexl','readxl','msigdbr','rvest','httr','igraph','visNetwork','ReactomePA','org.Hs.eg.db','AnnotationDbi','stringr','annotate','magick','shinyjs','pdftools','WGCNA','shinyBS','shinydashboard')
getOptions('repos')
getOption('repos')
library(BiocManager)
options(repos = BiocManager::repositories())
library('BiocManager')
install.packages('BiocManager', dependencies = TRUE)
install.packages("BiocManager", dependencies = TRUE)
install.packages(mypacks, dependencies = TRUE)
install.packages(mypacks, dependencies = TRUE)
.libPaths()
library(BiocManager)
options(repos = BiocManager::repositories())
shiny::runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
shiny::runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
install.package('utf8')
install.packages('utf8')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
install.packages('readxl')
install.packages("readxl")
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
#powers = c(seq(from = 20, to=40, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5, networkType = network_type)
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
par(las=2,mfrow=c(box_row,box_col),mar = c(1,1,1,1),cex.lab=1.2)
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
runApp('Desktop/JUMPn_Shiny/execution')
# plot trend
lines(m[j,],col=crtCol)
runApp('Desktop/JUMPn_Shiny/execution')
